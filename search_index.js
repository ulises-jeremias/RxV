var searchModuleIndex = ["rxv",];
var searchIndex = ["ItemValue","Item","is_error","send_blocking","send_context","send_non_blocking","TimestampItem","CloseChannelStrategy","of","error","send_items","Iterable","Comparator","Func","FuncN","ErrorFunc","Predicate","Marshaller","Unmarshaller","Producer","Supplier","NextFunc","ErrFunc","CompletedFunc","BackpressureStrategy","OnErrorStrategy","ObservationStrategy",];
var searchModuleData = [[" ","rxv.html"],];
var searchData = [["rxv","","rxv.html#ItemValue","type "],["rxv"," Item is a wrapper having either a value or an error. ","rxv.html#Item","struct "],["rxv"," is_error checks if an item is an error ","rxv.html#Item.is_error","fn (Item)"],["rxv"," send_blocking sends an item and blocks until it is sent ","rxv.html#Item.send_blocking","fn (Item)"],["rxv"," send_context sends an item and blocks until it is sent or a context canceled.  ","rxv.html#Item.send_context","fn (Item)"],["rxv"," send_non_blocking sends an item without blocking.  It returns a boolean to indi","rxv.html#Item.send_non_blocking","fn (Item)"],["rxv"," TimestampItem attach a timestamp to an item. ","rxv.html#TimestampItem","struct "],["rxv"," CloseChannelStrategy indicates a strategy on whether to close a channel. ","rxv.html#CloseChannelStrategy","enum "],["rxv"," of creates an item from a value ","rxv.html#of","fn "],["rxv"," error creates an item from an error ","rxv.html#error","fn "],["rxv"," send_items is an utility funtion that send a list of ItemValue and indicate  th","rxv.html#send_items","fn "],["rxv"," Iterable is the basic type that can be observed ","rxv.html#Iterable","interface "],["rxv"," Comparator defines a func that returns an int:  - 0 if two elements are equals ","rxv.html#Comparator","type "],["rxv"," ItemToObservable defines a function that computes an observable from an item.  ","rxv.html#Func","type "],["rxv"," Func2 defines a function that computes a value from two input values.  pub type","rxv.html#FuncN","type "],["rxv"," ErrorFunc defines a function that computes a value from an string. ","rxv.html#ErrorFunc","type "],["rxv"," Predicate defines a func that returns a bool from an input value. ","rxv.html#Predicate","type "],["rxv"," Marshaller defines a marshaller type (voidptr to []byte). ","rxv.html#Marshaller","type "],["rxv"," Unmarshaller defines an unmarshaller type ([]byte to interface). ","rxv.html#Unmarshaller","type "],["rxv"," Producer defines a producer implementation. ","rxv.html#Producer","type "],["rxv"," Supplier defines a function that supplies a result from nothing. ","rxv.html#Supplier","type "],["rxv"," Disposed is a notification channel indicating when an Observable is closed.  pu","rxv.html#NextFunc","type "],["rxv"," ErrFunc handles an string in a stream. ","rxv.html#ErrFunc","type "],["rxv"," CompletedFunc handles the end of a stream. ","rxv.html#CompletedFunc","type "],["rxv"," BackpressureStrategy is the backpressure strategy type. ","rxv.html#BackpressureStrategy","enum "],["rxv"," OnErrorStrategy is the Observable error strategy. ","rxv.html#OnErrorStrategy","enum "],["rxv"," ObservationStrategy defines the strategy to consume from an Observable. ","rxv.html#ObservationStrategy","enum "],];
